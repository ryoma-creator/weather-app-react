ーーーーーーIntroduction to This Fileーーーーーー

Thank you for viewing.💡

These are the logs of the work I have done up to this point. Although I sometimes can't record everything due to extensive learning, it serves as a rough guide to what I have been doing.

The most recent learning and work logs are at the bottom.

If you are curious about what I have done and what I have learned, you can copy the data from this file and paste it into your AI assistant to get an overview of the situation.

ーーーーーー(In Japanese)ーーーーーーーーーーーーーーーー

ご閲覧ありがとうございます。
これらは、日々私が現在まで行ってきた作業の履歴となります。
学習しすぎて、たまに全ては記載できていないですが、大体何を行ってきたかの目安となります。

最新版の習得、作業履歴は、一番下にございます。

もし、何を行ったのか、どのようなものを私が学習したのか、気になった場合、このファイル内のデータをコピーし、お手持ちの"AI上"に貼り付けて、状況を伺ってみるのも、一つの手となります。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー


Mar 23
  Web Development
    - Odin Foundation Landing Page Read (1 hour)
      - Read Odin Foundation Landing Page with English translation.
  Version Control (Git)
    - Commit message review (30 minutes)
      - Reviewed commit message guidelines.
    - Understand commit message rules (45 minutes)
      - Learned the rules for writing commit messages.
    - Try to write commit messages following the 7 rules (30 minutes)
      - Practiced writing commit messages following the 7 rules.
    - Understanding -m and -f difference (40 minutes)
      - Learned the difference between -m and -f options in Git.
    - Commit and push the -f ver commit message to Git (30 minutes)
      - Committed and pushed a commit message using the -f option in Git.
    - Understanding when to commit on this project (40 minutes)
      - Learned when to make commits in a project.
    - How to make project (1 hour)
      - Explored how to create a project.
    - How to make memo on project and open (30 minutes)
      - Learned how to make notes on a project and open it.
    - Making memo with outlines (four) in the directory to explain (45 minutes)
      - Created memos with outlines to explain projects in the directory.
    - Understanding why "git init" is needed and its structure (40 minutes)
      - Learned why "git init" is necessary and its structure.

Mar 24
  Web Development
    - Learn Live Server (1 hour)
      - Explored Live Server and its functionalities.
  JavaScript
    - Read and understand const, let, var (45 minutes)
      - Studied const, let, and var variables in JavaScript.
    - Complete JavaScript task (1 hour)
      - Completed JavaScript task assigned.
  Version Control (Git)
    - Create GitHub Repo (30 minutes)
      - Created a new GitHub repository.
  Visual Studio Code (VSCode)
    - Unicode Setting on VSCode (15 minutes)
      - Configured Unicode settings on VSCode.
  Others
    - Resignation Process (3 hours)
      - Worked on resignation process for previous company.

Mar 25
  JavaScript
    - JavaScript Assignment and knowledge check (40 minutes)
      - Completed assignment and knowledge check on JavaScript.
  Version Control (Git)
    - Create GitHub Repo (30 minutes)
      - Created a new GitHub repository.
  Visual Studio Code (VSCode)
    - Unicode Setting on VSCode (15 minutes)
      - Configured Unicode settings on VSCode.
  Others
    - Resignation Process (3 hours)
      - Worked on resignation process for previous company.

Mar 26
  CSS
    - Flex-box Study (1 hour)
      - Studied Flexbox using the Flexbox Zombies resource.
    - Review CSS Variables (45 minutes)
      - Reviewed concepts related to CSS variables.
    - Understand CSS Flexbox (1 hour)
      - Gained understanding of CSS Flexbox.
  Others
    - Resignation Process (3 hours)
      - Worked on resignation process for previous company.

Mar 27
  HTML & CSS
    - HTML & CSS Review (1 hour)
      - Reviewed basic HTML & CSS concepts.
    - Wrap Flexbox (45 minutes)
      - Practiced wrapping Flexbox elements.
    - HTML & CSS 2 Review (45 minutes)
      - Reviewed additional HTML & CSS concepts.
  Others
    - Walking + Training (1 hour)
      - Engaged in walking and training activities.

Mar 28
  JavaScript
    - JavaScript Study (30 minutes)
      - Reviewed const and ${} syntax.
  Git ＆ Markdown Memo
    - Portfolio memo, what's the best way to show learning proof (1 hour 30 minutes)
      - Worked on documenting portfolio progress and explored best methods to showcase learning.
   (##Before edit from here)
	Others 1 hour
		walking and gym
	  
	2hours
	-assignment for Data Types and Conditionals(javascript) with Replit
	

Mar 29
	40 min
	review Data Types and Conditionals(javascript)

	how to study toppest people 10min

	2 hours
	Dev Tool
	1 hour
	javascript/function
	other(1 hour)
	gym/walking
	
Mar 30 
	other 15min
	gym/ walking
	git 30min
	commit message by 7 rules/make and transfer my glossaries memo to git hub
	
	javascript 
	argument, parameter, function / ${}

Mar 31  
	(English only day)
	3hours 
	javascript
	if, boolean ,loops, array, etc
	ruby
	ruby1(progate 14 lessons) , each methods, array
	2 hours half
	Dev Tool
	debug, break point (until step 5 https://developer.chrome.com/docs/devtools/javascript/)
	in English only)



apr 1
  1hour
  error Dev Tool
  1hour
  Problem solving
  1 hour
  Project / how to do, draw map etc
  1 hour
  How to study for engineer 2024/how do top people study to maximize daily time productivity


  apr 2

  1hour
  gym
  1hour
  Problem Solving / how to make best performance daily life and fix

  apr 3
   (Too busy(for learning odin), due to fatigue, I did not have energy to write)
   

  apr 4
   2 hours 
   1 hour half 
   2 hours
   error / document.querySelector()の使い方
   Gym

   Apr5
   DOM
	2hours 

   Apr6(sleepless due to air pollution)
   For,roop, Array(review)
   Object(review) , Arrays in Objects 
   Object{object} , difference of Array and Object access way
   Object key: value , key = primitive only, value → object also ok


 Apr 7 5:30 am 

  	7am
	running 5min
	training few min
	
	1hour
	1hour
	1hour
	mainly Arrow and function

Apr 8   9:30 am woke up
	10:00? Start 
	1 hour
	array/function
	1 hour
	call back - deep understanding

Apr9    4:00 woke up (toothache...) 4hours sleep
	7:00 running 15min run-I found new good habit
	8:00-9:30 callback function
	11:30-13:30? / WEB-client-Server with English
	3:15 running
	3:40?-4:   / WEB-Application, Review and Find How To Learn Effectively
	5:00 - 6:30 
	8:00 - 9:00 Review

Apr 10   
	running 10min
	2 hour Finding Effective Reviewing way with Ai   ←prioritize what you need first on am
	1 hour Reviewing by Memo 
	2 hour Node JS 
	
	[Midnight "Cough" Problem - Air pollution and dusty dovey cover]
 	Until morning, I could not sleep!!
	
Apr 11 ###sleepless , feel fatigue###	
		
	running 10min
	2 hours 
	Github→github message setting. it took 1hour/Rock/scissors paper project/

        2 hours→ rock scissors paper project/ → random, how to make

        2 hours
	

Apr 12  Break
	fatigue , does not have motivation
        → its affecting Apr 10 sleepless one.
	     Apr 11 → under sleepless, you did

	running 10min
	
Apr 13
	9:00-9:30
	checking 02-April and write for past 3 days while analyzing.

	9:30-10:30
	rock scissors paper project/ make New one for only console(html,js,fucntion,git comment)

	12:00-2:00pm
	rock scissors paper project/ 2 foundation logic for game

	@4:00 - 4:40 
	gym(arm and runinng) and cold shower
	
	4:40 - 5:40 or 6:40...

	7:10-8:40 ?
	rock scissors paper project

	around 0:30 over sleep

Apr 14  woke up 10:00 (I feel fatigue) 

	

Apr 15 	2 hours two set plus English 
	how to work as fleerance
	25min 20min walking

Apr 16 Woke up 4:00
 	DOM object meaning in DOM
	1 hour ,
	English

	10:00-11:47
	DOM object , append, querySelector


Apr 20 10:00 - 9:00pm

Apr 21 10:00??-15:00

Apr 22 gym 15min
	
Apr 23 12:00
	1hour
	Practice DOM by dot.install while making code by myown
	#01-07 with AI question till you can write code perfectly.

	14:30 15min
	running

	15:00 1hour 15min
	MyTabMenu 

	18:30 
	20-30min TOEIC all parts

	22:00
	over 1hour half
	Which way should I move next ruby or javascript and python?

Apr 24 
	9:00 woke up 3times wakeup due to cough
 	
	9:30? Gym running 10min new record / wait lift / abdminal

	10:20
	DOM .install
	# 2345 pass
	# 6 or Each ❌
	1hour
        1hour
	1 hour about Randing page project with html and CSS

	21:00 gym while seeing how to hunt job
	40min

	22:00-24:00 searching
Apr 25

	gym 10:00? Runinng and traniing
	search and React
	10:40-12:00 

Apr 26

Apr 27 React 1
Apr 28 React 2

Apr 29	React

	11:15-1:43 2hours half + night time , try to memorize by flash card
	review progate React 1 and 2 (until props)
	child instance and parent and so on... and why do they need it for and what's role..
	so many question one by one


Apr 30  React 
	3times + night time , try to memorize by flash card
	progate
	what's the rendering meaning why need and so on.
	one by one, still I have question and struggle to catch image what's react want to do.

May 1  
	gym walking 10min
	3 times , sleepless due to ichy cough on midnight 1:50-7:00am...
	React 4 
	what's the constructor and why and so on.
	Midnight memorize by flash card js,css, html each of over 15

May 2   
	11:00 start
	gym walking + 8.3speed and 1  5min + training / best condition patern
	
	React Noticed! React has <App /> Hierarchical structure and call like a staircase
	
	Review Function
	gym walking + lift up double 10kg 10 3set , 5kg 10 3set with diffrent postion

 
May 5 React (noticed js,return,jsx - function or {key:値} pattern)


	



May 10	



May 11 JS function, Method, class/instance -- Review
	React Progate 1, 2 , 3 （All by Class component）
	(Understand and notice , I need to learn and pile up basics to do React)


May 12	Running 10min
	React progate 2, 3, 4 （All by Class component）
	JS function, Method, class/instance -- Review
	Progate4(input.value.target)
	

May 13 JS function,  class/instance Review

May 14 (Forgot what I did)
 

May 15 React  
		Try to make until end  , dot install (first time only)

May 16 React To do list half
		useState(hook)- learn first time function style component
		Training 

May 17 fetch Ai
		React Try to make it as one by one parts
		and study for to May 16 to do list which I was not sure 
		(parent and child component role difference)
		(conditional rendering)-(basic conditional !,&&,? :)

May 18 
May 19 Node.JS -Odin Project- Introduction
	   React - React Official site
	   Search for only React or including BackEndBasics to portpholio

May 20 --- immigration day

May 21 Node.JS - Progate 1  	
	   SQL- Progate 1 ,SQL IV
	   Making Plan

May 22 Node.JS - Progate 2, 3
	   SQL- Progate 
	   Making Plan

May 23 Node.JS - Progate 4, 5(on going) 
	   HTML CSS - Progate 8 lesson
	   Making Plan

May 24
	   strong fatigue and headeache 

May 25 Node.JS Memo
	   React - Odin Project [3] + JS lesson 
	   Setting Vite, React, Dev Tool and understanding 

May 26 

May 27 React - Odin Project [2,4,5]
	   				main.jsx and app.jsx difference 
	   				framework and library difference 
	   				default and name export
	   				[4]Fix Error
　　　  React - Official [JavaScript in JSX with Curly Braces]
       React - Official [Writing Markup with JSX]
               
			 Understanding "Destructuring assignment" （3hours or more）

May 28 React  - Official [Passing Props to a Component] (2hours)
					understanding "Destructuring assignment"
						-Why can an <img /> tag alone render an image?
						-How is the expression src={getImageUrl(person)} evaluated and valid?
						-How can the getImageUrl function, imported from a separate file, be referenced within the Avatar component?
						-How can the person object, defined within the Profile component, be referenced within the Avatar component?
						-What is the role of the default value 's' for the second argument size in the getImageUrl function?
						-How does setting a default value serve as a safeguard when an optional property is not provided?

						Compare with last day "Destructuring assignment"

May 29 React  - Official [Passing Props to a Component]
					Review
					Spread syntax 
					Children
					Search English Voca in React
	   React  - Official [Conditional Rendering]		
	   				else return
					understanding why you use if,?:,&&
					<>()<>
					Challenges 1,2,3 (Need Retry again)
	   React  - Official [Rendering Lists]	
	   				 All...
					 Challenges 1,2,3,4 (Need Retry again) 
					 *React Official Answers were wrong.
	   Planning - Study and Portfolio		

May 30  React - Odin Project [7]
					Keys in React
					uuid , increment id
					understanding good and bad Key
		
	    React - Odin Project [8] - [Passing Data Between Components]
					props - Default Setting review
					props - function
					*want to review again these parts
		
		React - Odin Project [9] - [Introduction To State]
					Read
					decipher BackGround Switch Component

May 30  React - Odin Project [9] - [Introduction To State]
					Read
					decipher BackGround Switch Component

		React  - Official [State: A Component's Memory]
					Understanding to retain Data by hooks
					Understanding flow of React Code
					return 0 can be index[0]
					disable property
					next and prev error
					position of hooks
					index and state 
					review set and state are function
					import { useState } from 'react'; to use
				
					challenge [1,2,3,] 	
					- decipher each Components Error
					[1]gallery
					[2]form inputs
					[3]submit message
					[4]Remove unnecessary state 

		React  - Official [Render and Commit]
				

Jun 1
Jun 2
Jun 3  Travel Totally Refresh
Jun 4  Coming back
Jun 5  Light Review 

Jun 6   React     Review 
					Describing the UI　- ALL
						Understanding Your UI as a Tree
						Conditional Rendering
					Adding Interactivity 
						Responding to Events 
						⇨(Until "Event propagation" )


				  custom button
				  children
				  Understanding <> and {} difference in JSX
				  Understanding <Button><Button/> - parents and child

		React - Odin Project [10] - [More On State]
		React  - Official [State as a Snapshot]		　
		React  - Official [Choosing the State Structure]
					- Group related state
					-
		
Jun 7	Gym   	  ✔️ Condition

	    React     Review
					Describing the UI　[second time]
					✔️	1. First React component 
					✔️	2. Creating multi-component files 
					✔️	3. Adding markup with JSX {profile}
					✔️	4. Using JavaScript in JSX
					✔️  5. Configuring components with props {to do list}
						 - ✔️✔️✔️ Understanding { children }  (1hour)
					✔️	6. Conditional rendering of components
					✔️	7. Rendering multiple components
						 - key
						8. Writing pure components
						9. Understanding UI as a tree

		Gym   	  ✔️ Condition

	    React     Review
					Adding Interactivity　[second time]
					✔️	1. Handling events
						 - ✔️ Understanding { children } ⇨ Use codesanbox with Claude sample image to figure out
					✔️ 	2. Using state to remember {image gallery}
					✔️ 	　- ✔️ Understanding "index < element.length -1" 
						     Try to make original "children"
						3. UI update phases
					✔️	4. State update delay {form}
					✔️	5. Queueing state updates
						 - ✔️ "setScore(s => s + 1)"
						6. Updating state objects　- Not yet in Odin project
						7. Updating state arrays   -  Not yet in Odin project

				  Try React by VS code

		React  - Official [Choosing the State Structure]		　
					✔️✔️✔️  State Consolidation {pont event}
						 - ✔️✔️✔️ CSS(onPointerMove, client ,e.pageX,position-absolute-relative,transform,vw,vh)
						 
						Contradiction Prevention
						Compute, Don't Store
						DRY State
						Flat Over Nested				  


Jun 8	
		Food	  ✔️ Condition
		Gym   	  ✔️ Condition
		Sup		  ✔️ Condition

	    React     Review
					Describing the UI　[second time]
					✔️	1. First React component 
					✔️	2. Creating multi-component files 
					✔️	3. Adding markup with JSX {profile}
						- (new!) always 2 ways for component - Data and function
					✔️	4. Using JavaScript in JSX
					✔️  5. Configuring components with props {to do list}
						 - ✔️✔️✔️ Understanding { children }  (1hour)
						6. Conditional rendering of components
						7. Rendering multiple components
						 - (new!) You can import and use functions from separate files just as if they were written in the same file.
						8. Writing pure components
						9. Understanding UI as a tree
	
	    React     Review
					Adding Interactivity　[second time]
					✔️	1. Handling events
						　- (new!) is inline style better ? ⇨ NO！
					✔️	2. Using state to remember {image gallery}
						  - (new!) change = 2 ways - state and Conditional　⇨ combine = switch on off
						3. UI update phases

			Food      ✔️ Condition (Before Study)
			Gym   	  ✔️ Condition

					✔️	4. State update delay {submit form}
						-(new!)handleSubmit on the form 
					✔️	5. Queueing state updates
	
						6. Updating state objects　- Not yet in Odin project
						7. Updating state arrays   -  Not yet in Odin project

		React  - Official [Choosing the State Structure]		　
					✔️	1.State Consolidation {pointer}
						 - ✔️ transform: translate(),position: relative absolute
					✔️✔️  2-1.Contradiction Prevention (two codes)
						{loading with Async}
						 - ✔️✔️ sync, await , Promise , resolve

			Food      ✔️ Condition (Before Study)
			Gym   	  ✔️ Condition

					✔️✔️ 2-2.Contradiction Prevention (two codes)
						{loading with Async}
						 - ✔️ (!)true,false ⇨ variable = same ,but just only one code ! ⇨ avoid confusion or mistakes

					✔️	3.Avoid redundant state {form label}
					✔️　4−1.DRY State(Avoid duplication in state) (three codes)

			Food      ✔️ Condition (Before Study) (4times)
			Gym   	  ✔️ Condition (4times)

					✔️✔️　4−2.DRY State(Avoid duplication in state) (three codes){select bar ＆ spread}
						- ✔️ if (item.id === id)
						- ✔️ { ...item, title: e.target.value }
						- ✔️ map ⇨ else {return item;}
					　  4−3.DRY State(Avoid duplication in state) (three codes){select bar ＆ spread}	
						5.Flat Over Nested				  

	Result 
	Total Component 15
	      Gym        4 
	What I was not sure but You could figure out today?
		- (new!) always 2 ways for component - Data and function
		- (new!) You can import and use functions from separate files just as if they were written in the same file.　It means, how you call ways are also same. ⇨ {} 
		- (new!) is inline style better ? ⇨ NO！
		- (new!) change = 2 ways - state and Conditional　⇨ combine = switch on off




		Jun 9	
		Food	  ✔️ Condition
		Gym   	  ✔️ Condition
		Sup		  ✔️ Condition

	    React     Review
					Describing the UI　[second time]
					✔️	1. First React component 
					✔️	2. Creating multi-component files 
					✔️	3. Adding markup with JSX {profile}
					✔️	4. Using JavaScript in JSX
					✔️  5. Configuring components with props {to do list}
					✔️	6. Conditional rendering of components
					✔️	7. Rendering multiple components
	
						8. Writing pure components
						9. Understanding UI as a tree
	
	    React     Review
					Adding Interactivity　[second time]
					✔️	1. Handling events
					✔️	2. Using state to remember {image gallery}
						3. UI update phases
					✔️	4. State update delay {submit form-drop list}
						- ✔️ onChange={e => setTo(e.target.value)}>
						- ✔️S elect
					✔️	5. Queueing state updates
	
						6. Updating state objects　- Not yet in Odin project
						7. Updating state arrays   -  Not yet in Odin project

		React  - Official [Choosing the State Structure]		　
					✔️ 	1.State Consolidation {pointer}
						 - ✔️ transform: translate(),position: relative absolute
					✔️	 2-1.Contradiction Prevention (two codes)
						 	{Textarea ,loading with Async}
						 - ✔️ if (isSent) { return <h1>Thanks for feedback!</h1> }⇨ if not, nothing return ⇨
						it means nothing is displayed 


			Food      ✔️ Condition (Before Study)
			Gym   	  ✔️ Condition

					✔️ 2-2.Contradiction Prevention (two codes)
						{loading with Async}
						 - ✔️ (!)true,false ⇨ variable = same ,but just only one code ! ⇨ avoid confusion or mistakes

					✔️	3.Avoid redundant state {form label}
					✔️ 　4−1.DRY State(Avoid duplication in state) (three codes)
					 	- (!) two ways to duplicate ⇨
						< /> or map & const List ⇨ times call

					 　4−2.DRY State(Avoid duplication in state) (three codes){select bar ＆ spread}
						- ✔️ if (item.id === id)
						- ✔️ { ...item, title: e.target.value }
						- ✔️ map ⇨ else {return item;}


		Jun 10	
		Food	  ✔️ Condition
		Gym   	    Condition ⇨ close
		Sup		  ✔️ Condition
		Sleep	  ✔️ Condition

	    React     Review
					Describing the UI　[second time]
					✔️	1. First React component 
					✔️	2. Creating multi-component files 
					✔️	3. Adding markup with JSX {profile}
					✔️	4. Using JavaScript in JSX
					   5. Passing props to a component {basic To do}
						 - (!)Understanding Data Flow in React:
						  As long as Parent data, you can pass Props down to other every children.
					✔️	6. Conditional rendering of components
					✔️	7. Rendering multiple components
	
						8. Writing pure components
						9. Understanding UI as a tree

	    React     Review
					Adding Interactivity　[4 times?]
					✔️✔️	1. Handling events　{Child} 
							- ✔️✔️(!)
								Allowable changes (passed as props or children):
								- Text or content
								- Specific event handlers
								- State-dependent attributes (disabled, active, etc.)

		Food	    Condition ⇨ only breed ⇨ cant no concentrate and memory is not good.
		Gym   	  ✔️ Condition 

				    ✔️	2. Using state to remember {image gallery}
							- review index[x]
				    ✔️	3. UI update phases
					✔️	4. State update delay {submit form-drop list}
					✔️	5. Queueing state updates
	
						6. Updating state objects　- Not yet in Odin project
						7. Updating state arrays   -  Not yet in Odin project

		React  - Official [Choosing the State Structure]		　
					 	1.State Consolidation {pointer}
						 - { x: 0, y: 0 } ⇨ { key1: value1, key2: value2 }
						 - ✔️ transform: translate(),position: relative absolute
	
			Food      ✔️ Condition (Before Study)
			Gym   	  　 Condition
			Sup

						 2-1.Contradiction Prevention (two codes)
						 	{Textarea ,loading with Async}
						 - ✔️ if (isSent) { return <h1>Thanks for feedback!</h1> }⇨ if not, nothing return ⇨
						it means nothing is displayed 




					 2-2.Contradiction Prevention (two codes)
						{loading with Async}
						 - ✔️ (!)true,false ⇨ variable = same ,but just only one code ! ⇨ avoid confusion or mistakes

						3.Avoid redundant state {form label}
					 　4−1.DRY State(Avoid duplication in state) (three codes)
					 	- (!) two ways to duplicate ⇨
						< /> or map & const List ⇨ times call

					 　4−2.DRY State(Avoid duplication in state) (three codes){select bar ＆ spread}
						-  if (item.id === id)
						-  { ...item, title: e.target.value }
						-  map ⇨ else {return item;}

					✔️✔️✔️   5-1 Avoid deeply nested state {Object and List combination - "Recursive Object Structure" }
					   	- ✔️ review object and list　- Differences in Usage
						⇨ [{ name: "りんご" }, { name: "バナナ" }] 
						⇨ { 場所: "公園", 食べ物: ["おにぎり", "サンドイッチ"] }
						- **To group similar items:** Use a list of objects.
						- **To gather various pieces of information about one large item:** Use an object with lists inside.
						- map ⇨ ⭕️ list, ❌ 
						- "Recursive Object Structure" - list and object

			Food      ✔️ Condition (Before Study)
			Gym   	  　 Condition

						5-1 Avoid deeply nested state {Object and List combination - "Recursive Object and function Structure" }
						 - object list ⇨ variable.key.map
						 - ✔️✔️✔️ recursive function
						 - key.length > 0 && ⇨ if there is element, display jsx (short-circuit evaluation)
						 	(!)⇨ make copy by another way not just only map method.
						 - understanding list id and ol confusion, + unnecessary id on list
						 - ul , li ⇨ recursive function ⇨ reverse! Understanding the Inverted Structure
						 - All Duplication Methods in React
						 - why map ＆ key.length > 0 &&, both Duplication methods need ?

					
		Jun 11	
			(After Jun 5)
			To avoid forgetting what I’ve learned so far, 
			I’ve decided to start incorporating additional knowledge 
			from today and try to build something on my own.

			Practice review　→ portfolio

		Food	  ✔️ Condition (rice)
		Gym   	  ✔️ Condition 
		Sup		  ✔️ Condition
		Sleep	  ✔️ Condition


        React     Review
                    Describing the UI　[second time]
                    ✔️	  1. First React component 
						  	- (!) try to make props to pass them to img (I could not do right away)
							- (!) props ⇨ need same duplicate props 
							- ⇨ to avoid it, you need "array from" method (I wasnt seen yet)
                    ✔️	  2. Creating multi-component files 
                    ✔️	  3. Adding markup with JSX {profile}
                    ✔️	  4. Using JavaScript in JSX
						  	-(!) name {key1:値 , key2:{key:値,key:値}} ⇨  name.key2 ⇨ {key:値,key:値} !
							- css style ⇨ object better ?
                  	✔️     5. Passing props to a component 
                            - (!)Understanding Data Flow in React:
                            As long as Parent data, you can pass Props down to other every children.
                    ✔️	  6. Conditional rendering of components {basic To do List}
						  	- (!) Attempt to make extra condition for basic to do (understand more what I need)
                    ✔️	  7. Rendering multiple components {e-commerce item website etc..}
    
                         8. Writing pure components
                    ✔️    9. Understanding UI as a tree

        React     Review
                    Adding Interactivity　[5 times?]
                    	    1. Handling events　{Child} 
                            - (!)
                                Allowable changes (passed as props or children):
                                - Text or content
                                - Specific event handlers
                                - State-dependent attributes (disabled, active, etc.)
   
   	    Food         ✔️ Condition ⇨ rice
        Gym       	 ✔️ Condition 
		1hour rest   ✔️ Condition
		nap			   Condition 

        React     Review
                    Adding Interactivity　[5 times?]
                        ✔️  1. Handling events　{Child} 
                            - (!)
                                Allowable changes (passed as props or children):
                                - Text or content
                                - Specific event handlers
                                - State-dependent attributes (disabled, active, etc.)
							- Attempt to make list object component to change style from there.
							- (!) {showMore && <p> → inside jsx
                        ✔️    2. Using state to remember {image gallery → page}
                            - review index[x]
                        ✔️    3. UI update phases
                        ✔️    4. State update delay {submit form-drop list}
                        ✔️    5. Queueing state updates {Increment button app}
    
                        6. Updating state objects　- Not yet in Odin project
                        7. Updating state arrays   -  Not yet in Odin project

 
        React  - Official [Choosing the State Structure]        　
                       ✔️ 1.State Consolidation {mouse pointer App}
                         - { x: 0, y: 0 } ⇨ { key1: value1, key2: value2 }
                         -  transform: translate(),position: relative absolute
    
                       ✔️  2-1.Contradiction Prevention (two codes)
                            {Feedback form App, Textarea ,loading with Async}
                         -  if (isSent) { return <h1>Thanks for feedback!</h1> }⇨ if not, nothing return ⇨
                        it means nothing is displayed 
						 -  (!) common JSX hide skill →  {isSending && <p>Sending...</p>}

                    	✔️  2-2.Contradiction Prevention (two codes)
                       	 {loading with Async}
                         -  (!)true,false ⇨ variable = same ,but just only one code ! ⇨ avoid confusion or mistakes
							 -  on off → useState → variable　→ true , false → just only 1

                        3.Avoid redundant state {form label → Name type App}
							 - if you want to combine state , use variable instead 
							 - why need label ?　→ focus

                     　4−1.DRY State(Avoid duplication in state) (three codes)
                        - (!) two ways to duplicate ⇨
                        < /> or map & const List ⇨ times call

						→items→ map → item ⇨ setState ⇨ only item change

            Food      ✔️ Condition (Before Study)
            Gym       　 Condition
			Sup		  ✔️ Condition
			Nap       ✔️ Condition

                     　4−2.DRY State(Avoid duplication in state) (three codes){select bar ＆ spread}
                        -  if (item.id === id)
                        -  { ...item, title: e.target.value }
                        - ❌ map ⇨ else {return item;}

                         5-1 Avoid deeply nested state {Object and List combination - "Recursive Object Structure" }
						- {childPlaces.length > 0 && (...)} ⇨ if there are no data, no show for li tag.
							-　often use for li, ol, ul not to show unnecessary bullet and number.

                        5-1 Avoid deeply nested state {Object and List combination - "Recursive Object and function Structure" }
                         - object list ⇨ variable.key.map
                         -  recursive function
                         - key.length > 0 && ⇨ if there is element, display jsx (short-circuit evaluation)
                            (!)⇨ make copy by another way not just only map method.
                         - understanding list id and ol confusion, + unnecessary id on list
                         - ul , li ⇨ recursive function ⇨ reverse! Understanding the Inverted Structure
                         - All Duplication Methods in React
                         - why map ＆ key.length > 0 &&, both Duplication methods need ?

						 5-2 Avoid deeply nested state {Object and List combination - "Recursive Object and function 
						  - flat → new object and list style
						  - ✔️✔️✔️ normalized data structure
						  		- Accessing object properties using variables as keys.
								- Example: home[roomId]



           Food         Condition (Before Study)
            Gym       　 Condition
			Sup		    Condition
			Nap         Condition
			rest        ✔️Condition

						  5-2 Avoid deeply nested state {Object and List combination - "Recursive Object and function 
						  Extra Practice by generating Ai 
							✔️   Basic Object Property Access 
							✔️	 Object Nesting 
							✔️	 Accessing Object Properties in Arrays 
							✔️	 Dynamic Object Key Access 
						 ✔️	✔️ ✔️  Recursive Data Access 
							(!) object and list → How to access and how many ways 
							(!) Try to make it easy and simple and parts by Ai and generate them if you stucks


May 12  ❌ due to lack of sleep and slept on 4 am

May 13      Food         ✔️Condition
            Gym       　 ✔️Condition
			Sup		     ✔️Condition
			Sleep          ✔️Condition

		TOEIC → Warm up for English

		        React  - Official [Choosing the State Structure]        　

                ✔️    2-2.Contradiction Prevention 
                        {loading with Async - Order State App}
                         -  (!)true,false ⇨ variable = same ,but just only one code ! ⇨ avoid confusion or mistakes

                ✔️     3.Avoid redundant state {form label}
						 - useState(" ")→ onChange→ e.target.value

                     　4−1.DRY State(Avoid duplication in state) 
					 	{menu,tab change, e-commerce add function app}
						 - why need two useState even you dont use?
						　　→ in the future, u might add....

            Food      ✔️ Condition (Before Study)
            Gym       ✔️  Condition
			Sup		  ✔️ Condition

						    - The reason why you need to put on List to useState?⇩
						⭐️	→ (!) List etc info... you should put on useState once before use to prevent not to change for other components. use it within that components. do not change mother data.
						→ so this is manner.
						All Data list , object should be added by useState before you use.
						⭐️	- (!)useState(List[index]) → map→ change  each index → template pattern
						- Memory become heavy ⇨ not effective
					 	 so do not include unnecessary list,object data. pick up and extract only data what you need from .
						　ex→ ❌ all object[0] ⭕️ object[0].id etc..

                     　4−2.DRY State(Avoid duplication in state) (three codes){select bar ＆ spread}
                        -  if (item.id === id)
                        -  { ...item, title: e.target.value }
                        -  map ⇨ else {return item;}

                         5-1 Avoid deeply nested state {Object and List combination - "Recursive Object Structure" }
                        -   review object and list　- Differences in Usage
                        ⇨ [{ name: "りんご" }, { name: "バナナ" }] 
                        ⇨ { 場所: "公園", 食べ物: ["おにぎり", "サンドイッチ"] }
                        - **To group similar items:** Use a list of objects.
                        - **To gather various pieces of information about one large item:** Use an object with lists inside.
                        - map ⇨ ⭕️ list, ❌ 
                        - "Recursive Object Structure" - list and object				



June 17           Tutorial: Tic-Tac-Toe

						Declaring a winner 
						 - null or others === false or True
						 - && and null combination
						 - basic loop
						 - Index Access with Variable
						 - distinguishing method for 
						 logical AND(&&) VS conditional rendering with React(&&)
						 - a === b & a === c
						   a === b === c
						
						Break
						 - ||
						 - ternary operator (xIsNext ? "X" : "O")


June 18				Food
					Gym
					Sup
						[Sharing State Between Components]

						Understanding State Lifting { Accordion-FAQ page }
							- children
							- Making new dir by React 
							- Passing useState by props from parents to children - how ? - put in Variable
							- UseState - Children ⇨ each / Parents ⇨ all
					Food
					Gym
							- variable - on ,off 
							- null - default = false
							- filter + List + !index = close
							- props from parents ⇨ each controlled
							- Challenge 1

					Food    
							- Challenge 2 {Search bar}
							- query
							- Method
								- split
								- some
								- startsWith
								- toLowerCase

Jun 19
					Food
					Gym

			Odin Project[More On State]	
						Assignment[FirstName LastName]
							 - 	Notice , still not enough for making by myself even if you can reads code.
			Odin Project[Project: CV Application]
			                 - understanding demand on manual
							 - find design image
							 - decide how to make component
							 - make structure of directly
							 - make first component

Jun 20      Odin Project[Project: CV Application]
							 - br on JSX for multiple things
							 　- \n , 
							 - split + map
							 - {index > 0 && ' '} ⇨ except for first index number
							 - {index !== items.length - 1 && <br />}
							    ⇨ except for last element of list
						　　　- map((num, index) ⇨ 
						       first one = element , second one = index
							 - split("") ⇨ every single alphabet
							   split(" ") ⇨ every space
							 - <React.Fragment> ⇨ instead of div

Jun 21 　　　Odin Project[Project: CV Application]
							 - Try to fix position and code for jsx and css for category - Many things... hover,block....etc
							 - TOO MANY THINGS (I cant not recall details,
							 but I noticed and learnt when I tried to write and make on VS code ,css,jsx,components )
							 - noticed I need to recall css since I focus on React and Js for over 1month half.
							 - noticed I can imagine how to make component and
							 make it shorter by React now.
			Gym              - twice  
							 - directory and pass issues ⇨ understand
							 - const vs function 
							   -  review difference of definition 
							   const add = (a, b) => a + b;
							   function add(a, b) {  return a + b;}
							✔️✔️✔️ - "only function can be reusable"
							 - key
							   -  make id or index ⇨ id by object

							 - Review 
			 React Official  - [Describing the UI]
			                    - get image for List + object and how to call
							 - [Adding Interactivity]
							    - get Idea setState[0] + 1 ,page change ⇨ 
								instead of list　⇨ component file ⇨ possible by switch + rendering
							
							✔️✔️✔️- Noticed ⇨ write code by myself ⇨ review by reading ⇨ I can notice more how to write and get Idea. Make code by　myself + review　⇨ Best Practice
Jun 22                      - css for Profile Section

Jun 23        food, sup     
							- how to make it more reusable 
							- get Idea to put on All of Data to component
							- know where to put on data into directory 
							- How to import from component ⇨ need component name
							- 

Jun 24 - 29  ❌🤢       Food Poison / Sick high fever

Jun 30        Restart        Try to Visualizing React Concepts with Everyday Examples
							- List Object
							- Conditional Rendering
							- EventListener 
							- useState
							　Understanding the process of creating something dynamic


Jul 1 						 Restart "CV App" development
							 - Review and Analyze and understanding

Jul 2 						 - Visualize CV App and another COLORS App flow by Figjam 
							   to analyze and understanding WHY (while visualizing)

								1. **props vs import/export**
								- Passing data from parent to child through props is similar to export and import.
								- Export/import removes file boundaries, making components feel like they are in the same file.

								2. **Dynamic switching method**
								- Question on how to use `useState` to change data when wrapping data in an Object instead of a List.

								3. **Differences between List and Object**
								- List: An image of moving index numbers (moving the current state with index + 1).
								- Object: Managing data with keys (clarification needed).

								4. **Placement of useState and onClick buttons**
								- Interested in the compact color change method of OdinProject.
								- Consultation on whether to use conditional rendering.

								5. **File splitting of components**
								- Question on how far to split components into files.

								6. **Placement of event handlers**
								- Ranking of the most commonly used approaches.

								7. **Handling data written in Object instead of List**
								- Question on how to handle data when `map` cannot be used with Object.

								8. **Handling Objects**
								- Question about the management methods of Objects.

								9. **Data linking between files**
								- Method to change data between `Category.js` and `ProfileForm.js`.
								- How to cross file boundaries using export/import.

								10. **Behavior of click events**
									- Method to correspond to the array index with a click event.
									- Managing multiple lists titled with object keys (e.g., profile, education).

								11. **Linking stateholder and list in separate files**
									- Method to link the data of `Category` and `Input` respectively.

								12. **Considering component and file structure using FigJam**
									- Creating flowcharts and diagrams with FigJam to visualize component structure and data flow.
									- Planning component interactions and partitioning methods.

								13. **Dividing Odin Project's Colors mini-app into components**
									- Considering the method of dividing the Colors mini-app into components.
									- Identifying the optimal partitioning method and integrating it as a dynamic function into the CV app.
									- Advancing considerations while creating flowcharts with FigJam.


Jul 3
Jul 4 	　sleepless due to cough 
			I could not record well
			but I was making image and leaning jul 3,4
			(what I can briefly remember by review on jul 8, was below)
			・illustrating flow chart with picture on figjam

			  https://www.figma.com/board/jp9V10HZGPdw3jwcAG966W/Untitled?node-id=0-1&t=WjPXTgcPqx8u5bvC-0

			・consider how to apply dynamic flow image to my cv.
			・How to make useState for "Object" data
				・understanding 2 ways to access for object data
				  ・useState('apple') ⇨ ' ' meaning 



Jul 5,6,7,8 	💥💥😡	Private one     Immigration Problem !!!
									(PH Government is collapsed and asked huge money and get mental break, needed to search ask a lot and spend time for it.)

Jul 8     sleepless due to cough
           
		   booking hotel and so on for immigration problem
		   cv app
		   ⏰・review to recall what I was doing and image for it again.
		   	 

Jul 9  　　sleepless due to cough

			Sleep		Condition
            Food      ✔️ Condition (Before Study)
            Gym       ✔️ Condition
			Sup		  ✔️ Condition
			Nap         Condition (from the halfway point)
			
			condition management
			・review for condition management from my memo by experience
			cv app
		    ・review to recall what I was doing and image for it again.
			・Knowing useState [Frequently used ranking and pattern]
		　　  ・useState ⇨  object vs List ⇨「Which one is used more often?

Jul 10     sleepless due to cough ⇨ 10 or 11 am wake up
			air conditioner cleaning　⇨ ✔️
			filter	cleaning		 ⇨ ✔️
			humidifier       ⇨ ✔️
			humidifier cleaning ⇨ ✔️


			Sleep		Condition
            Food      ✔️ Condition (Before Study)
            Gym       ✔️ Condition
			Sup		  ✔️ Condition
			Nap         Condition (from the halfway point)



			find
			include
			toLowerCase
			split
			setSelectedCategory(category.title.toLowerCase().split(' ')[0]);⇨ [0] 

Jul 11

Jul 12     I could sleep without any trouble
			since jun 24 - jul 11 ❌

			wake up 7:50
			8:20 start

			[Progress summary July 12]
			**Implementation of Basic React Component Structure**

				- Created the basic structure for `App.js`, `CategoryList.js`, `ProfileForm.js`, and `InputFields.js`.

				**Introduction of State Management**

				- Used the `useState` hook to manage the state of category selection.

				**Basic Implementation of Data Flow**

				- Passed data between components using props.

				**Application of CSS Styling**

				- Implemented responsive design using Flexbox and media queries.

				**Implementation of Basic Form Input Structure**

				- Implemented various input types (text, number, file).


				These advancements have led to the implementation of the basic structure and functionality of the application. However, features such as data storage and editing, as well as the final resume display, have not yet been implemented.



						[Details what did I do]
						### Development of a Resume Application

						#### Understanding the Component-Based Structure with React
						- Trying to understand the roles of `App.js`, `CategoryList.js`, `ProfileForm.js`, and `InputFields.js`.

						#### State Management and Data Flow
						- Learning how to use the `useState` hook.
						- Trying to understand how to pass data through props.
						- Implementing state management for category selection.

						#### CSS Styling
						- Learning how to use Flexbox.
						- Implementing responsive design with media queries.
						- Trying to understand the usage and meaning of the `calc()` function.

						#### Improving Form Inputs
						- Considering the selection of appropriate `input` types.
						- Learning how to add the `pattern` attribute.
						- Trying to understand the implementation of file input (profile image).

						#### Data Structure
						- Trying to understand the structure and usage of `categoriesData` and `sectionData`.

						#### Unimplemented Features (Understanding and Planning Phase)
						- Adding a practical experience section.
						- Implementing edit and submit functions.
						- Implementing data display after submission.
						- Using the input mask library (`react-input-mask`).
						- Introducing React DatePicker.
						- Persisting data using local storage.

						#### Areas with Insufficient Understanding
						- Usage of `Array.from()` and `map()`.
						- Appropriate usage and management of the `useState` hook.
						- Meaning and usage of the `accept` attribute.
						- Role and implementation of the `onSave` function.

						#### Considerations
						- Whether to integrate a backend using SQL.
						- Appropriate usage of libraries.
						- Visually improving the application with background videos.

						#### Questions
						- Specific implementation methods for data saving and editing features.
						- Implementation methods for the final resume display feature.
						- Designing reusable components and practicing repetitive implementation.

						#### Learning Direction
						- Need to deepen understanding of basic React concepts and state management.
						- Learning detailed control methods in CSS.
						- Studying best practices for form processing and data management.

					gym　for condition ✔️


Jul 13      cv app , To Do List
						to learn next step for "CRUD" ,
						I started to make "To do list" by React.

			✊		gym　for condition ✔️
			✨		motivation video   ✔️　(🆙 new habit)
			💡		 nap while doing image training for react ✔️

			🔍### Key Learnings from Jul 13's Questions

			1. **State Management in React**
			- Usage of `useState` hook
			- State updates (e.g., `setTasks`)

			2. **Component Structure**
			- Roles and relationships of `App.js`, `TodoList.js`, and `TodoItem.js`
			- Passing props

			3. **Event Handling**
			- Handling form submissions and button clicks

			4. **JavaScript Functions**
			- Usage of `map` and `filter` functions
			- Utilizing the spread operator (`...`)
			- Using the ternary operator (`? :`)

			5. **Task Operations Implementation**
			- **Add**: Creating new task objects
			- **Delete**: Using `filter` to remove specific tasks
			- **Edit**: Using `map` and conditional updates
			- **Toggle Completion**: Flipping boolean values (`!task.completed`)

			6. **Unique ID Generation**
			- Using `Date.now()`

			7. **Form Input Handling**
			- Retrieving and validating input values (using `trim()`)

			8. **Conditional Rendering**
			- Displaying a message when the task list is empty

			9. **Data Structure**
			- Structure of task objects (`id`, `name`, `completed`)

			10. **Similarities and Differences with CV App**
				- Common data management techniques
				- Unique complexity of CV app (e.g., section management)

			11. **React Developer Tools**
				- Visualizing and inspecting state

			12. **Data Flow Between Components**
				- Passing props from parent to child components

			13. **Immutable State Updates**
				- Creating new objects or lists to update state

			This list covers the main learning points from Jul 13 questions. By referring to this, you can review the fundamental concepts of the To-Do list application and key features of React.	


Jul 14 - Jul 21 　❌ ⇨ Philippines Immigration Procedure 😠　Really Time consuming /  I did not have any time for Learning programming at all.


Jul 22		Restart Again ⛅️
					-  set up mindset 
						- https://www.youtube.com/watch?v=LI2ugvDvL0E
						- Read my memo from past experience

			✅	   -  analyze what should I restart from.  
						-  https://react.dev/learn ⇨  React Official / "Quick Start" is better for Now to recall React basics.

					-  deciding the Priority of the Portfolio from the Current Situation

				


Jul 23		✊		gym　for condition ✔️
			✨		motivation video   ✔️　(🆙 new habit)
			💡		 nap while doing image training for react ✔️

			         Making another To do list from scratch
			✅	       - Making CRUD except for "U"
						- Review previous To-do list

Jul 24      

			✊		gym　for condition ✔️
			✨		motivation video   ✔️　(🆙 new habit)
			💡		 nap while doing image training for react ✔️

					 To Do List
					 - Added task "categorization" functionality
					 - Implemented category-based "filtering" for tasks

					 especially I can not figure out 'filter' perfectly yet.



Jul 25
			💡		 brain supplement   ✔️
			✊		gym　for condition ✔️
			✨		motivation video   ✔️　(🆙 new habit)

					 To Do List
			✅	     - map + conditional rendering VS filter 
						- conclusion ⇨ same 
					 - filter a && b
					 - Added task categorization and priority filtering. Implemented task priority with border color indication.
					
			💡		 brain supplement   ✔️
			✊		gym　for condition ✔️

					- Drag & Drop ⇦ ⚡️⛈️⚡️
						- React Beautiful DnD README 
					- Array.from
					- splice
					- understanding Library and how much I should understand...⇨ answer , no need as for now...
					-library(first time💡)
					- Draggable
						- where should I enclose and put...?
						- understanding difference of droppable
						-Understanding library Id and key Id
						- draggableID = only strings ! (this developer decided the special rule...) 

					compared to Jul 24, Easy to understand yesterday codes.

					Library Drag & Drop might be old?
					React-beautiful-dnd ⇨ Error happen frequently 
					⇩
					people are sharing to use alterative one,
					such as ...@dnd-kit/core
  Jul 25 


					Learning Snippet on Vscode

			💡		 brain supplement   ✔️
			✊		gym　for condition ✔️

			💡		- Local Storage (new!)
			💡		- useEffect (new!)
						- Effect or Effect Callback
						- Dependency Array
						- Cleanup Function or Cleanup

			💡😭	- Library ⇨ Error Problem
					  react-beautiful-dnd ❌
					  ⇨ @hello-pangea/dnd ⭕️

					It took for 3 hours to understand ....
					code was correct.
					Library was not compatible for new React...

			✅		- understanding "fork"
						- react-beautiful-dnd is no update anymore since 2 years ago.
						- community people updated instead,
						thats why you can use by same code
						(you need import and uninstall old one)

					- before sleep
			🌿		- hot shower to get sleep   ✔️
			💖		- watch motivation video for mindset ✔️

July 27
			💡		 brain supplement   ✔️
			✊		gym　for condition ✔️
						- 7.4 speed , 4min + 9.4 sp 1 min
						is better than 9.5 sp 2min
						for mind 
						- for 1 part muscle ⇨ next 72 hours are better so that fatigue does not pail up and stop studying due to 

			💡		 brain supplement✔️						
			✅　　　		- useEffect
					　　　Understanding
							- Dependency Array
							- []
							- [state name]
							- none 

					- before sleep
			🌿		- hot shower to get sleep   ✔️
			💖		- watch motivation video for mindset ✔️
	
Jul 28    
			💡		 brain supplement   ✔️
			✊		gym　for condition ✔️

					Understanding..💡
			✅　		 - Local Storage
					 	- JSON.parse()
						- JSON.stringify()
						- logic

			  　	  - learning plan for start of typescript
					
					Learning... 🔍
					  - useState(() => computeInitialState()) 

Jul 29       Rest


Jul 30		CSS     UI design
　＆	
Jul 31		
			 		Understanding
			✅		How to use Animation on React
						- Lotti 
						- set up directly and pass , size etc
			✅		How to make Hover Icon change
					 	- hover and switch Icon image for Check Icon		
			✅		Get Ideal UI design from Real Professional App. 
						- Night time should be spent time with looking for Ideal image App.
						- Always You need to get perfect image for UI / design for CSS details.

Aug 1		UI Brain Storming For To-do List
					Understanding
			✅		Inspection is best to get  UI / Image for noob like me
					　　 Ai Cant understand ui and css 
					    - even if you give perfect pic with explanations,
						and sometimes it will lose some css. 
						- best way is using inspection from ideal website.
Aug 2		✅Ui design   too many things ... 
						- from morning to night time
Aug 3       ✅Tailland CSS first time  too many things...
			  Using component from web site , with Tailland css
			  Making rainbow frame
			✅  try to get started library component site
			  seeing and choosing from Library (over 10 site) to know what I can use
			✅ Short Cut / Comment out + command F
			✅ Libraty Compornent Name and Shape 
				- basic name, I needed to understand first / tab. nav. etc....everything

			  
Aug 4		✅ Making logic for Completed or incompleted  for to do list
			Finding portfolio website image
			checking what is typescript
			checking what is Next.js 
			Checking Portfolio website to get image

Aug 5		Rest Brain (while cheking design and new skill, learning plan.)
			✅ Ui/Ux basics 
				- view how to emphasize which part and so on
			Checking Portfolio website to get image
			Chekcing Next.js and tailwind css if I can do or not
			✅ Observing other Professional develover (on youtube)
				- how to create project app (new things)
				- when you are rest day, it is good. while you rest your brain, you can update new things.
			making plan how to do including next.js + tailwind css...and so on
			
Aug 6       

		  🔥✅  Making Original Component from Libray first time
				- integrating Library component into another
				- tab + chips on ToDo-app
			✅  Check Over 30 Library Website to find best component Library
				- Libraty Compornent Name and Shape 
				- basic name, I needed to understand first to find my image / tab. nav. etc....everything
			more...etc

Aug 7            Understanding 
			✅ 	Method Chaining
					- fint + map (on my ToDo App filter)
					(ex)filterTabs
						.find((filterTab) => filterTab.name === activeFilterTab)
						.filters.map((filter) => (...))
						
Aug 8       Private busy days
Aug 9       Rest with Web making Video on Tailwind css

Aug 10      Notice / Forgetting basic props flow from parent to child 
			 - CSS / Library / Tailwind / Icon / Animation ⇨ forget React.js		

			Utilize AI for Efficient Development
			- By having AI handle the creation, you can reduce issues with libraries and errors, making implementation smoother. 
			This is especially useful when time is limited or when you don’t want to spend too much time dealing with library operations.

			Plan Ahead and Avoid Wasting Time
			- Plan and visualize what you need to do before starting work to proceed more efficiently. 
			Continuing work when tired can be a waste of time.

			Start with Simple Libraries or Tools
			- Before diving into complex libraries or tools, start with simpler and more understandable ones. 
			This helps avoid spending excessive time fixing errors and dealing with complicated issues.

Aug 11 		
			✅ Git and GitHub Basics

			Remote repository setup
			File management and version control

			✅ VS Code Workflow

			File organization and management
			Extension installation for enhanced productivity

			✅ Tailwind CSS Configuration

			Custom color and font setup in tailwind.config.js
			Global styles application using @layer base

			　 Next.js Integration

			Google Fonts import with next/font/google
			Font application in components

			✅ Project File Structure

			Understanding folder hierarchy
			Efficient file naming conventions

			✅ Finder Operations

			Project relocation impact on VS Code settings

			✅ Code Snippets and Shortcuts

			Usage of 'rafce' for React component creation

			✅ CSS Fundamentals

			Global styling techniques
			Responsive design principles

			✅ Development Best Practices

			Keeping focus on personal growth
			Learning from professional developers' techniques

			
Aug 12    Break
		
Aug 13, 14 , 15 ⇩ 

			Understanding
		**Creation of a Portfolio Website**

		Besides routing, I created the Navbar, Home, About, Skills, Work, and Contact sections over the past few days. During that time, I mainly experienced, struggled with, and learned the following:

		✅ **Custom Component Creation / Implementing Container Components and Applying Styles to Child Elements**
		- I spent dozens of hours on this, but there were components where styles were applied correctly and others where they were not. 
		I tried changing the structure of the divs, checked the parent elements, but couldn't get it to work. 
		- What I learned is that, at this point, using config and index.css to reduce the amount of code is the way to go. Regarding layout, 
		I understood that without proper guidance from professionals, relying solely on AI has its limits.

		✅ **Utilizing Tailwind's @apply Directive**
		- Mastered creating custom classes for improved reusability over the past few days.

		✅ **Controlling Layout with a Two-Layer div Structure (Separating Overall Layout from Content)**

		✅ **Practicing Responsive Design**
		- Understanding and using breakpoints (sm, md, lg, xl, 2xl).
		- Dynamically adjusting text size (setting based on device size).

		✅ **Understanding the Difference Between h-full and h-screen and Their Appropriate Use**
		- Grasping the non-inheritable nature of layout properties.

		✅ **Mimicking Professional Usage of Visual Studio Code**
		- Previously, I had created a To-Do list app from scratch by myself. However, this time, by observing professionals through videos, I learned their methods, which led to more efficient development.

		✅ **Acquiring Necessary Plugins, such as Tailwind**

		✅ **Improving Debugging and Problem-Solving Skills**
		- I faced challenges in applying CSS uniformly with Tailwind and React. Additionally, certain features required unique methods for implementation, such as:

		✅ **Discovering Elements That Cannot Be Used with Tailwind CSS/index.css/@apply**
		- Alternative methods for `!important` (e.g., defining custom classes in index.css).
		- I learned that some things cannot be used with @apply. For instance, when implementing hover effects on images, I wanted to use `!important` but couldn't do so with @apply, so I had to change the approach (using linear-gradient).

		- Managing image paths using variables.

		- Handling post-build reflection issues (re-running `npm start`).

		This isn't everything, but it's what I remember learning, so I'm documenting it. There's more.

		✅ **Got accustomed to Tailwind over the past few days, can now operate it myself, and can use index.css as well.**
		✅ **I understood the boundaries of what can't be done (custom components).**
		✅ **By watching other professionals' Tailwind CSS YouTube videos, I clearly understood the concepts. When I was choosing a portfolio on the 11th, I couldn't understand whether it was Tailwind CSS or Next.js.**


Jul 16  
		scroll
		API  e-mail receiving
		`${}

Jul 17  review / nav bar / writing challenge / {}` / props pass name

Jul 17-[Weather App]- until around 23 ? ()
		[Summary]
	---
	### Weather App Development Summary (July 17-) - 
	**Key Learnings and Achievements**


Jul 23 ..? [E-Commerce]
Summerry (on progress)

Main
	New Skill➡️Error➡️Took 2hours for every new skill such as Next.js, Css in js, Git... ext
	context, 
	API, 
	Effect, 
	reducer
	+a　（css new tec ,New setting　rafce, etc...）

	⇩
	これを、ここ10日間で学びつつ、
	E-commerseの作成を行ってきた。
	個別にもう一度確認したいところがある。

Recordを描かない経験

２週間描かないでみた。

何を行ってきたのか、記憶のとっかかりがなく、
自分がどんな成長をしているのか、
どんな利益を得てきたのかわからなく、空っぽのようになった。

その結果、利益を得てきたという感覚がなく、
それが自信や、モチベーションに影響してしまった。

またどこまで学び成長したのか把握してないので、どこを復習して定着すべきかの自分の守備範囲を守ることも定かでなくなった。

その結果、自分のレベルを現実的に分析しづらく過去の記憶が忘れかけているのに、次のレベルに手を出そうとするという、定着せず進む自体が発生した。

早期にイメージを得るというのは効果があるが、ここが気になる。

✅経験して学んだこと/振り返り。
新しいものをやった時に発生した設定のエラー系。
後述するのものもそうだが、新しいtailwindとか他のものをすることで、installやsetting系のものでエラーやgit等うまくいかず、問題が発生ていた。また、やり直すことで、以前のgitが残り、同期？がうまくいかずそこでエラーの再対処が発生していた。最終的にはエラーは、一括で、現在のローカルのものに書き換えるというものでforceすればすぐ治ることに気づけたが、知らない時は異常に時間がかかった。一つの小さなエラーで2時間は悪戦苦闘していた。

その中で、新しいものを習っていったが、(context, API, Effect, reducer)
小さい規模で行っていないので、
段階的ではなかった。(e-commerseは基礎だとは思うが。)
⇩
個別にもう一度確認したいところがある。
⇩
個別にe-commerse内のものを学習しなおした方がいい。そして最後にe-commerseで習ったものを通してもう一度全体をつなげて俯瞰してみて、理解できているか行った方がいい。


Sep 1 
	Gym

    Analyzing and Review from 17 to 30 what I did from remanining messages.
	Understanding AI can not make sammary from my remaning message
	Understanding lack of review and lacking review attribute to lack of understanding my knowledge how much I learn , where is on my stage now, and which point I should review.

	UseEffect - understanding there is 4 types
				- Understanding Using DOM pattern (Windon,Document,specific API..)
				- You can use by library or custom hooks
				- reviewing DOM to understand

	UI css    - understanding overflow-y
				- h-problem

	Reduce Method - understanding
				- parsefloat()
				- toFixed

	Clean Code
	     		- Destructuring Assignment
				  - cart.reduce((sum, { price, amount })
				- Early Return

	Error       - cart.length > 0 vs cart (if its API, 
					it might something happen, 
					so Length should be included for null , undefined NaN..etc)

 
Sep 2 
				Complete E-commerse 
				 - Footer
				 - adding Ai picture from stable difusion

				Using photoshop
				 - edit for bg remove / transparent

				searching
				 - typescript
				 - making plan for next
				
				Gym


Sep 3
				Framer Motion
				- Learning how to write export not to be error...
				 - export default AnimatedComponent;
				  - export { AnimatedComponent };
				- <AnimatedComponent> should not be enclosed by
				other div with css, It does not animate.
				- <AnimatedComponent> can not enclose other components
				- I understand, I need to refer from professionals first
				how to use motion not just only Ai 

				- unrstand motion basics
				- understand motion can use by just motion.h1 or div....easily

				- error → <Link> should be not used by motion / should be enclosed by motion.div instead
			✅  - understanding variants parents and children
			    - understanding 'initial' and so on were just arbitary name.

				Learning Typescript Basics
				- finding and reading , watching though for it

				seeing Idea for e-commerse	
			     - watching 3D showcase items codes how to make with motion

sep 4			watching portfolio site idea
				
				reviewing basic by react officals


				

				

